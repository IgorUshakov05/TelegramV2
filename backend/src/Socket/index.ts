import { Server, Socket } from "socket.io";
import { SetIdRoomOrGet } from "../DataBase/Request/Room";
function RandomEmoji() {
  const emojis = [
    "üòÄ",
    "üòÉ",
    "üòÑ",
    "üòÅ",
    "üòÜ",
    "üòÖ",
    "üòÇ",
    "ü§£",
    "üòä",
    "üòá",
    "üôÇ",
    "üôÉ",
    "üòâ",
    "üòå",
    "üòç",
    "ü•∞",
    "üòò",
    "üòó",
    "üòô",
    "üòö",
    "üòã",
    "üòõ",
    "üòú",
    "ü§™",
    "üòù",
    "ü§ë",
    "ü§ó",
    "ü§≠",
    "ü§´",
    "ü§î",
    "ü§ê",
    "ü§®",
    "üòê",
    "üòë",
    "üò∂",
    "üòè",
    "üòí",
    "üôÑ",
    "üò¨",
    "ü§•",
    "üòå",
    "üòî",
    "üò™",
    "ü§§",
    "üò¥",
    "üò∑",
    "ü§í",
    "ü§ï",
    "ü§¢",
    "ü§Æ",
    "ü§ß",
    "ü•µ",
    "ü•∂",
    "ü•¥",
    "üòµ",
    "ü§Ø",
    "ü§†",
    "ü•≥",
    "üòé",
    "ü§ì",
    "üßê",
    "üòï",
    "üòü",
    "üôÅ",
    "‚òπÔ∏è",
    "üòÆ",
    "üòØ",
    "üò≤",
    "üò≥",
    "ü•∫",
    "üò¶",
    "üòß",
    "üò®",
    "üò∞",
    "üò•",
    "üò¢",
    "üò≠",
    "üò±",
    "üòñ",
    "üò£",
    "üòû",
    "üòì",
    "üò©",
    "üò´",
    "ü•±",
    "üò§",
    "üò°",
    "üò†",
    "ü§¨",
    "üòà",
    "üëø",
    "üíÄ",
    "‚ò†Ô∏è",
    "üí©",
    "ü§°",
    "üëπ",
    "üë∫",
    "üëª",
    "üëΩ",
    "üëæ",
    "ü§ñ",
    "üò∫",
    "üò∏",
    "üòπ",
    "üòª",
    "üòº",
    "üòΩ",
    "üôÄ",
    "üòø",
    "üòæ",
    "üê∂",
    "üê±",
    "üê≠",
    "üêπ",
    "üê∞",
    "ü¶ä",
    "üêª",
    "üêº",
    "üê®",
    "üêØ",
    "ü¶Å",
    "üêÆ",
    "üê∑",
    "üêΩ",
    "üê∏",
    "üêµ",
    "üôà",
    "üôâ",
    "üôä",
    "üêí",
    "ü¶ç",
    "ü¶ß",
    "üêî",
    "üêß",
    "üê¶",
    "üê§",
    "üê£",
    "üê•",
    "ü¶Ü",
    "ü¶Ö",
    "ü¶â",
    "ü¶á",
    "üê∫",
    "üêó",
    "üê¥",
    "ü¶Ñ",
    "üêù",
    "üêõ",
    "ü¶ã",
    "üêå",
    "üêû",
    "üêú",
    "ü™≤",
    "üï∑Ô∏è",
    "üï∏Ô∏è",
    "ü¶Ç",
    "üê¢",
    "üêç",
    "ü¶é",
    "üêô",
    "ü¶ë",
    "ü¶ê",
    "ü¶Ä",
    "üê°",
    "üê†",
    "üêü",
    "üê¨",
    "üê≥",
    "üêã",
    "ü¶à",
    "üêä",
    "üêÖ",
    "üêÜ",
    "ü¶ì",
    "ü¶ç",
    "ü¶ß",
    "üêò",
    "ü¶õ",
    "ü¶è",
    "üê™",
    "üê´",
    "ü¶ô",
    "ü¶í",
    "üêÉ",
    "üêÇ",
    "üêÑ",
    "üêé",
    "üêñ",
    "üêè",
    "üêë",
    "ü¶å",
    "üêê",
    "üêì",
    "ü¶É",
    "üïäÔ∏è",
    "üêá",
    "üêÅ",
    "üêÄ",
    "üêøÔ∏è",
    "ü¶î",
    "üçè",
    "üçé",
    "üçê",
    "üçä",
    "üçã",
    "üçå",
    "üçâ",
    "üçá",
    "üçì",
    "ü´ê",
    "üçà",
    "üçí",
    "üçë",
    "ü•≠",
    "üçç",
    "ü••",
    "ü•ù",
    "üçÖ",
    "üçÜ",
    "ü•ë",
    "ü•¶",
    "ü•¨",
    "ü•í",
    "üå∂Ô∏è",
    "ü´ë",
    "üåΩ",
    "ü•ï",
    "ü´í",
    "üßÑ",
    "üßÖ",
    "ü•î",
    "üç†",
    "ü•ê",
    "ü•Ø",
    "üçû",
    "ü•ñ",
    "ü•®",
    "ü•û",
    "üßá",
    "üßÄ",
    "üçñ",
    "üçó",
    "ü•©",
    "ü•ì",
    "üçî",
    "üçü",
    "üçï",
    "üå≠",
    "ü•™",
    "üåÆ",
    "üåØ",
    "ü´î",
    "ü•ó",
    "ü•ò",
    "ü•´",
    "üçù",
    "üçú",
    "üç≤",
    "üçõ",
    "üç£",
    "üç±",
    "ü•ü",
    "ü¶™",
    "üç§",
    "üçô",
    "üçö",
    "üçò",
    "ü•†",
    "ü•Æ",
    "üç¢",
    "üç°",
    "üçß",
    "üç®",
    "üç¶",
    "ü•ß",
    "üç∞",
    "üéÇ",
    "üçÆ",
    "üç≠",
    "üç¨",
    "üç´",
    "üçø",
    "üßã",
    "üßÉ",
    "ü•§",
    "‚òï",
    "üçµ",
    "üç∂",
    "üç∫",
    "üçª",
    "ü•Ç",
    "üç∑",
    "ü•É",
    "üç∏",
    "üçπ",
    "üßâ",
    "üçæ",
    "ü´ñ",
    "ü™î",
    "üïØÔ∏è",
    "üí°",
    "üî¶",
    "üèÆ",
    "ü™û",
    "üõãÔ∏è",
    "ü™ë",
    "üõèÔ∏è",
    "üõå",
    "ü™ü",
    "üö™",
    "ü™§",
    "ü™ë",
    "üõí",
    "üõçÔ∏è",
    "üéÅ",
    "üéà",
    "üéè",
    "üéÄ",
    "üéä",
    "üéâ",
  ];

  return Array.from(
    { length: 4 },
    () => emojis[Math.floor(Math.random() * emojis.length)]
  );
}

type RoomMember = {
  userId: string;
  microphone: boolean;
};

const rooms = new Map<
  string,
  { members: Map<string, RoomMember>; emoji: string[]; startCall: Date | null }
>();

const sockethandle = (io: Server, socket: Socket) => {
  console.log("‚úÖ User connected:", socket.id);

  socket.on(
    "join",
    async ({ roomId, microphone }: { roomId: string; microphone: boolean }) => {
      const getInBase = await SetIdRoomOrGet({ ID: roomId, room: roomId });

      if (!rooms.has(roomId)) {
        rooms.set(roomId, {
          members: new Map(),
          emoji: RandomEmoji(),
          startCall: null,
        });
      }

      const room = rooms.get(roomId)!;
      room.members.set(socket.id, { userId: socket.id, microphone });
      socket.join(roomId);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startCall —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (!room.startCall && room.members.size === 2) {
        room.startCall = new Date();
      }

      socket.join(roomId);
      console.log(getInBase, " –∏–∑ –±–¥");
      if (!getInBase.success) {
        return io.in(roomId).emit("error", { roomId });
      }
      console.log(`üë§ ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

      io.in(roomId).emit("roomInfo", {
        roomId,
        startCall: room.startCall,
        members: Array.from(room.members.values()),
        emoji: room.emoji,
      });

      socket.to(roomId).emit("userJoined", {
        userId: socket.id,
        startCall: room.startCall,
        roomId,
      });
    }
  );

  socket.on("call_end_client", ({ roomId }) => {
    socket.to(roomId).emit("call_end_server", {
      isClose: true,
    });
    rooms.delete(roomId);
  });

  // üì° WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥
  socket.on("offer", ({ offer, roomId }) => {
    console.log(`üì® Offer –æ—Ç ${socket.id} –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
    socket.to(roomId).emit("offer", { offer, from: socket.id });
  });

  socket.on("answer", ({ answer, to }) => {
    console.log(`üì® Answer –æ—Ç ${socket.id} –¥–ª—è ${to}`);
    io.to(to).emit("answer", { answer, from: socket.id });
  });

  socket.on("candidate", ({ candidate, roomId }) => {
    console.log(`üì® Candidate –æ—Ç ${socket.id} –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
    socket.to(roomId).emit("candidate", { candidate, from: socket.id });
  });

  socket.on(
    "volume",
    ({
      roomId,
      userId,
      microphone,
    }: {
      roomId: string;
      userId: string;
      microphone: boolean;
    }) => {
      const room = rooms.get(roomId);
      if (!room) return;

      const member = room.members.get(userId);
      if (member) {
        member.microphone = microphone;
        room.members.set(userId, member);
      }

      io.in(roomId).emit("volume", {
        roomId,
        members: Array.from(room.members.values()),
      });
    }
  );

  socket.on("disconnect", () => {
    rooms.forEach((room, roomId) => {
      if (room.members.has(socket.id)) {
        room.members.delete(socket.id);
        console.log(`‚ùå ${socket.id} –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);

        io.in(roomId).emit("roomInfo", {
          roomId,
          members: Array.from(room.members.values()),
          emoji: room.emoji,
        });

        socket.to(roomId).emit("userLeft", {
          userId: socket.id,
          roomId,
        });
      }

      if (room.members.size === 0) {
        rooms.delete(roomId);
        console.log(`üóë –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞`);
      }
    });
  });
};

export default sockethandle;
